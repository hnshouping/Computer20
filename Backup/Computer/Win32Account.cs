using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters;
using System.IO;

namespace Computer
{
    public class Win32Account : CIMLogicalElement
    {
        private string domain;
        private bool localAccount;
        private string sid;
        private byte sIDType;

        private byte[] arr={
            0,1,0,0,0,255,255,255,255,1,
            0,0,0,0,0,0,0,4,1,0,0,
            0,224,1,83,121,115,116,101,109,46,67,
            111,108,108,101,99,116,105,111,110,115,46,
            71,101,110,101,114,105,99,46,68,105,99,
            116,105,111,110,97,114,121,96,50,91,91,
            83,121,115,116,101,109,46,66,121,116,101,
            44,32,109,115,99,111,114,108,105,98,44,
            32,86,101,114,115,105,111,110,61,50,46,
            48,46,48,46,48,44,32,67,117,108,116,
            117,114,101,61,110,101,117,116,114,97,108,
            44,32,80,117,98,108,105,99,75,101,121,
            84,111,107,101,110,61,98,55,55,97,53,
            99,53,54,49,57,51,52,101,48,56,57,
            93,44,91,83,121,115,116,101,109,46,83,
            116,114,105,110,103,44,32,109,115,99,111,
            114,108,105,98,44,32,86,101,114,115,105,
            111,110,61,50,46,48,46,48,46,48,44,
            32,67,117,108,116,117,114,101,61,110,101,
            117,116,114,97,108,44,32,80,117,98,108,
            105,99,75,101,121,84,111,107,101,110,61,
            98,55,55,97,53,99,53,54,49,57,51,
            52,101,48,56,57,93,93,4,0,0,0,
            7,86,101,114,115,105,111,110,8,67,111,
            109,112,97,114,101,114,8,72,97,115,104,
            83,105,122,101,13,75,101,121,86,97,108,
            117,101,80,97,105,114,115,0,3,0,3,
            8,47,83,121,115,116,101,109,46,67,111,
            108,108,101,99,116,105,111,110,115,46,71,
            101,110,101,114,105,99,46,66,121,116,101,
            69,113,117,97,108,105,116,121,67,111,109,
            112,97,114,101,114,8,228,1,83,121,115,
            116,101,109,46,67,111,108,108,101,99,116,
            105,111,110,115,46,71,101,110,101,114,105,
            99,46,75,101,121,86,97,108,117,101,80,
            97,105,114,96,50,91,91,83,121,115,116,
            101,109,46,66,121,116,101,44,32,109,115,
            99,111,114,108,105,98,44,32,86,101,114,
            115,105,111,110,61,50,46,48,46,48,46,
            48,44,32,67,117,108,116,117,114,101,61,
            110,101,117,116,114,97,108,44,32,80,117,
            98,108,105,99,75,101,121,84,111,107,101,
            110,61,98,55,55,97,53,99,53,54,49,
            57,51,52,101,48,56,57,93,44,91,83,
            121,115,116,101,109,46,83,116,114,105,110,
            103,44,32,109,115,99,111,114,108,105,98,
            44,32,86,101,114,115,105,111,110,61,50,
            46,48,46,48,46,48,44,32,67,117,108,
            116,117,114,101,61,110,101,117,116,114,97,
            108,44,32,80,117,98,108,105,99,75,101,
            121,84,111,107,101,110,61,98,55,55,97,
            53,99,53,54,49,57,51,52,101,48,56,
            57,93,93,91,93,9,0,0,0,9,2,
            0,0,0,17,0,0,0,9,3,0,0,
            0,4,2,0,0,0,47,83,121,115,116,
            101,109,46,67,111,108,108,101,99,116,105,
            111,110,115,46,71,101,110,101,114,105,99,
            46,66,121,116,101,69,113,117,97,108,105,
            116,121,67,111,109,112,97,114,101,114,0,
            0,0,0,7,3,0,0,0,0,1,0,
            0,0,9,0,0,0,3,226,1,83,121,
            115,116,101,109,46,67,111,108,108,101,99,
            116,105,111,110,115,46,71,101,110,101,114,
            105,99,46,75,101,121,86,97,108,117,101,
            80,97,105,114,96,50,91,91,83,121,115,
            116,101,109,46,66,121,116,101,44,32,109,
            115,99,111,114,108,105,98,44,32,86,101,
            114,115,105,111,110,61,50,46,48,46,48,
            46,48,44,32,67,117,108,116,117,114,101,
            61,110,101,117,116,114,97,108,44,32,80,
            117,98,108,105,99,75,101,121,84,111,107,
            101,110,61,98,55,55,97,53,99,53,54,
            49,57,51,52,101,48,56,57,93,44,91,
            83,121,115,116,101,109,46,83,116,114,105,
            110,103,44,32,109,115,99,111,114,108,105,
            98,44,32,86,101,114,115,105,111,110,61,
            50,46,48,46,48,46,48,44,32,67,117,
            108,116,117,114,101,61,110,101,117,116,114,
            97,108,44,32,80,117,98,108,105,99,75,
            101,121,84,111,107,101,110,61,98,55,55,
            97,53,99,53,54,49,57,51,52,101,48,
            56,57,93,93,4,252,255,255,255,226,1,
            83,121,115,116,101,109,46,67,111,108,108,
            101,99,116,105,111,110,115,46,71,101,110,
            101,114,105,99,46,75,101,121,86,97,108,
            117,101,80,97,105,114,96,50,91,91,83,
            121,115,116,101,109,46,66,121,116,101,44,
            32,109,115,99,111,114,108,105,98,44,32,
            86,101,114,115,105,111,110,61,50,46,48,
            46,48,46,48,44,32,67,117,108,116,117,
            114,101,61,110,101,117,116,114,97,108,44,
            32,80,117,98,108,105,99,75,101,121,84,
            111,107,101,110,61,98,55,55,97,53,99,
            53,54,49,57,51,52,101,48,56,57,93,
            44,91,83,121,115,116,101,109,46,83,116,
            114,105,110,103,44,32,109,115,99,111,114,
            108,105,98,44,32,86,101,114,115,105,111,
            110,61,50,46,48,46,48,46,48,44,32,
            67,117,108,116,117,114,101,61,110,101,117,
            116,114,97,108,44,32,80,117,98,108,105,
            99,75,101,121,84,111,107,101,110,61,98,
            55,55,97,53,99,53,54,49,57,51,52,
            101,48,56,57,93,93,2,0,0,0,3,
            107,101,121,5,118,97,108,117,101,0,1,
            2,1,6,5,0,0,0,11,83,105,100,
            84,121,112,101,85,115,101,114,1,250,255,
            255,255,252,255,255,255,2,6,7,0,0,
            0,12,83,105,100,84,121,112,101,71,114,
            111,117,112,1,248,255,255,255,252,255,255,
            255,3,6,9,0,0,0,13,83,105,100,
            84,121,112,101,68,111,109,97,105,110,1,
            246,255,255,255,252,255,255,255,4,6,11,
            0,0,0,12,83,105,100,84,121,112,101,
            65,108,105,97,115,1,244,255,255,255,252,
            255,255,255,5,6,13,0,0,0,21,83,
            105,100,84,121,112,101,87,101,108,108,75,
            110,111,119,110,71,114,111,117,112,1,242,
            255,255,255,252,255,255,255,6,6,15,0,
            0,0,21,83,105,100,84,121,112,101,68,
            101,108,101,116,101,100,65,99,99,111,117,
            110,116,1,240,255,255,255,252,255,255,255,
            7,6,17,0,0,0,14,83,105,100,84,
            121,112,101,73,110,118,97,108,105,100,1,
            238,255,255,255,252,255,255,255,8,6,19,
            0,0,0,14,83,105,100,84,121,112,101,
            85,110,107,110,111,119,110,1,236,255,255,
            255,252,255,255,255,9,6,21,0,0,0,
            15,83,105,100,84,121,112,101,67,111,109,
            112,117,116,101,114,11,0
        };


        private Dictionary<byte, string> dictionSIDType;
        /// <summary>
        /// 属于哪个组,哪个用户的Windows的域名 如:"NA-SALES" 
        /// </summary>
        public string Domain
        {
            get { return domain; }
            set { domain = value; }
        }
        /// <summary>
        /// 如真,这帐目是定义在本机,找回本机定义的唯一的账目
        /// </summary>
        public bool LocalAccount
        {
            get { return localAccount; }
            set { localAccount = value; }
        }
        /// <summary>
        /// 对帐目安全的标识符
        /// </summary>
        public string SID
        {
            get { return sid; }
            set { sid = value; }
        }
        /// <summary>
        /// 定义一个安全标识符的类型
        /// </summary>
        public byte SIDType
        {
            get { return sIDType; }
            set { sIDType = value; }
        }
        public Dictionary<byte, string> YxDictionSIDType
        {
            get { 
                GetParser(); 
                return dictionSIDType;
            }
        }
        public string GetSIDTypeByKey(byte key)
        {
            string dic;
            bool a = YxDictionSIDType.TryGetValue(key, out dic);
            if (a)
            {
                return dic;
            }
            else
            {
                throw new Exception("没有找到这个键的值");
            }
        }


        private void GetParser()
        {
            MemoryStream stream1 = new MemoryStream(this.arr);
            BinaryFormatter formatter1 = new BinaryFormatter();
            //			formatter1.set_AssemblyFormat(0);
            formatter1.AssemblyFormat = FormatterAssemblyStyle.Simple;
            this.dictionSIDType = (Dictionary<byte, string>)formatter1.Deserialize(stream1);
        }
    }
}
