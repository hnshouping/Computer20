using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters;

namespace Computer
{
    public abstract class  CIMMediaAccessDevice : CIMLogicalDevice
    {
        private UInt16[] capabilities;
        private string[] capabilityDescriptions;
        private string compressionMethod;
        private UInt64 defaultBlockSize;
        private string errorMethodology;
        private UInt64 maxBlockSize;
        private UInt64 maxMediaSize;
        private UInt64 minBlockSize;
        private bool needsCleaning;
        private bool numberOfMediaSupported;

        private byte[] arr={
            0,1,0,0,0,255,255,255,255,1,
            0,0,0,0,0,0,0,4,1,0,0,
            0,226,1,83,121,115,116,101,109,46,67,
            111,108,108,101,99,116,105,111,110,115,46,
            71,101,110,101,114,105,99,46,68,105,99,
            116,105,111,110,97,114,121,96,50,91,91,
            83,121,115,116,101,109,46,85,73,110,116,
            51,50,44,32,109,115,99,111,114,108,105,
            98,44,32,86,101,114,115,105,111,110,61,
            50,46,48,46,48,46,48,44,32,67,117,
            108,116,117,114,101,61,110,101,117,116,114,
            97,108,44,32,80,117,98,108,105,99,75,
            101,121,84,111,107,101,110,61,98,55,55,
            97,53,99,53,54,49,57,51,52,101,48,
            56,57,93,44,91,83,121,115,116,101,109,
            46,83,116,114,105,110,103,44,32,109,115,
            99,111,114,108,105,98,44,32,86,101,114,
            115,105,111,110,61,50,46,48,46,48,46,
            48,44,32,67,117,108,116,117,114,101,61,
            110,101,117,116,114,97,108,44,32,80,117,
            98,108,105,99,75,101,121,84,111,107,101,
            110,61,98,55,55,97,53,99,53,54,49,
            57,51,52,101,48,56,57,93,93,4,0,
            0,0,7,86,101,114,115,105,111,110,8,
            67,111,109,112,97,114,101,114,8,72,97,
            115,104,83,105,122,101,13,75,101,121,86,
            97,108,117,101,80,97,105,114,115,0,3,
            0,3,8,146,1,83,121,115,116,101,109,
            46,67,111,108,108,101,99,116,105,111,110,
            115,46,71,101,110,101,114,105,99,46,71,
            101,110,101,114,105,99,69,113,117,97,108,
            105,116,121,67,111,109,112,97,114,101,114,
            96,49,91,91,83,121,115,116,101,109,46,
            85,73,110,116,51,50,44,32,109,115,99,
            111,114,108,105,98,44,32,86,101,114,115,
            105,111,110,61,50,46,48,46,48,46,48,
            44,32,67,117,108,116,117,114,101,61,110,
            101,117,116,114,97,108,44,32,80,117,98,
            108,105,99,75,101,121,84,111,107,101,110,
            61,98,55,55,97,53,99,53,54,49,57,
            51,52,101,48,56,57,93,93,8,230,1,
            83,121,115,116,101,109,46,67,111,108,108,
            101,99,116,105,111,110,115,46,71,101,110,
            101,114,105,99,46,75,101,121,86,97,108,
            117,101,80,97,105,114,96,50,91,91,83,
            121,115,116,101,109,46,85,73,110,116,51,
            50,44,32,109,115,99,111,114,108,105,98,
            44,32,86,101,114,115,105,111,110,61,50,
            46,48,46,48,46,48,44,32,67,117,108,
            116,117,114,101,61,110,101,117,116,114,97,
            108,44,32,80,117,98,108,105,99,75,101,
            121,84,111,107,101,110,61,98,55,55,97,
            53,99,53,54,49,57,51,52,101,48,56,
            57,93,44,91,83,121,115,116,101,109,46,
            83,116,114,105,110,103,44,32,109,115,99,
            111,114,108,105,98,44,32,86,101,114,115,
            105,111,110,61,50,46,48,46,48,46,48,
            44,32,67,117,108,116,117,114,101,61,110,
            101,117,116,114,97,108,44,32,80,117,98,
            108,105,99,75,101,121,84,111,107,101,110,
            61,98,55,55,97,53,99,53,54,49,57,
            51,52,101,48,56,57,93,93,91,93,13,
            0,0,0,9,2,0,0,0,17,0,0,
            0,9,3,0,0,0,4,2,0,0,0,
            146,1,83,121,115,116,101,109,46,67,111,
            108,108,101,99,116,105,111,110,115,46,71,
            101,110,101,114,105,99,46,71,101,110,101,
            114,105,99,69,113,117,97,108,105,116,121,
            67,111,109,112,97,114,101,114,96,49,91,
            91,83,121,115,116,101,109,46,85,73,110,
            116,51,50,44,32,109,115,99,111,114,108,
            105,98,44,32,86,101,114,115,105,111,110,
            61,50,46,48,46,48,46,48,44,32,67,
            117,108,116,117,114,101,61,110,101,117,116,
            114,97,108,44,32,80,117,98,108,105,99,
            75,101,121,84,111,107,101,110,61,98,55,
            55,97,53,99,53,54,49,57,51,52,101,
            48,56,57,93,93,0,0,0,0,7,3,
            0,0,0,0,1,0,0,0,13,0,0,
            0,3,228,1,83,121,115,116,101,109,46,
            67,111,108,108,101,99,116,105,111,110,115,
            46,71,101,110,101,114,105,99,46,75,101,
            121,86,97,108,117,101,80,97,105,114,96,
            50,91,91,83,121,115,116,101,109,46,85,
            73,110,116,51,50,44,32,109,115,99,111,
            114,108,105,98,44,32,86,101,114,115,105,
            111,110,61,50,46,48,46,48,46,48,44,
            32,67,117,108,116,117,114,101,61,110,101,
            117,116,114,97,108,44,32,80,117,98,108,
            105,99,75,101,121,84,111,107,101,110,61,
            98,55,55,97,53,99,53,54,49,57,51,
            52,101,48,56,57,93,44,91,83,121,115,
            116,101,109,46,83,116,114,105,110,103,44,
            32,109,115,99,111,114,108,105,98,44,32,
            86,101,114,115,105,111,110,61,50,46,48,
            46,48,46,48,44,32,67,117,108,116,117,
            114,101,61,110,101,117,116,114,97,108,44,
            32,80,117,98,108,105,99,75,101,121,84,
            111,107,101,110,61,98,55,55,97,53,99,
            53,54,49,57,51,52,101,48,56,57,93,
            93,4,252,255,255,255,228,1,83,121,115,
            116,101,109,46,67,111,108,108,101,99,116,
            105,111,110,115,46,71,101,110,101,114,105,
            99,46,75,101,121,86,97,108,117,101,80,
            97,105,114,96,50,91,91,83,121,115,116,
            101,109,46,85,73,110,116,51,50,44,32,
            109,115,99,111,114,108,105,98,44,32,86,
            101,114,115,105,111,110,61,50,46,48,46,
            48,46,48,44,32,67,117,108,116,117,114,
            101,61,110,101,117,116,114,97,108,44,32,
            80,117,98,108,105,99,75,101,121,84,111,
            107,101,110,61,98,55,55,97,53,99,53,
            54,49,57,51,52,101,48,56,57,93,44,
            91,83,121,115,116,101,109,46,83,116,114,
            105,110,103,44,32,109,115,99,111,114,108,
            105,98,44,32,86,101,114,115,105,111,110,
            61,50,46,48,46,48,46,48,44,32,67,
            117,108,116,117,114,101,61,110,101,117,116,
            114,97,108,44,32,80,117,98,108,105,99,
            75,101,121,84,111,107,101,110,61,98,55,
            55,97,53,99,53,54,49,57,51,52,101,
            48,56,57,93,93,2,0,0,0,3,107,
            101,121,5,118,97,108,117,101,0,1,15,
            0,0,0,0,6,5,0,0,0,7,85,
            110,107,110,111,119,110,1,250,255,255,255,
            252,255,255,255,1,0,0,0,6,7,0,
            0,0,5,79,116,104,101,114,1,248,255,
            255,255,252,255,255,255,2,0,0,0,6,
            9,0,0,0,17,83,101,113,117,101,110,
            116,105,97,108,32,65,99,99,101,115,115,
            1,246,255,255,255,252,255,255,255,3,0,
            0,0,6,11,0,0,0,13,82,97,110,
            100,111,109,32,65,99,99,101,115,115,1,
            244,255,255,255,252,255,255,255,4,0,0,
            0,6,13,0,0,0,16,83,117,112,112,
            111,114,116,115,32,87,114,105,116,105,110,
            103,1,242,255,255,255,252,255,255,255,5,
            0,0,0,6,15,0,0,0,10,69,110,
            99,114,121,112,116,105,111,110,1,240,255,
            255,255,252,255,255,255,6,0,0,0,6,
            17,0,0,0,11,67,111,109,112,114,101,
            115,115,105,111,110,1,238,255,255,255,252,
            255,255,255,7,0,0,0,6,19,0,0,
            0,24,83,117,112,112,111,114,116,115,32,
            82,101,109,111,118,97,98,108,101,32,77,
            101,100,105,97,1,236,255,255,255,252,255,
            255,255,8,0,0,0,6,21,0,0,0,
            15,77,97,110,117,97,108,32,67,108,101,
            97,110,105,110,103,1,234,255,255,255,252,
            255,255,255,9,0,0,0,6,23,0,0,
            0,18,65,117,116,111,109,97,116,105,99,
            32,67,108,101,97,110,105,110,103,1,232,
            255,255,255,252,255,255,255,10,0,0,0,
            6,25,0,0,0,18,83,77,65,82,84,
            32,78,111,116,105,102,105,99,97,116,105,
            111,110,1,230,255,255,255,252,255,255,255,
            11,0,0,0,6,27,0,0,0,25,83,
            117,112,112,111,114,116,115,32,68,117,97,
            108,45,115,105,100,101,100,32,77,101,100,
            105,97,1,228,255,255,255,252,255,255,255,
            12,0,0,0,6,29,0,0,0,30,80,
            114,101,100,105,115,109,111,117,110,116,32,
            69,106,101,99,116,32,78,111,116,32,82,
            101,113,117,105,114,101,100,11,0
        };



        private Dictionary<UInt32, string> dictionCapabilities;
        /// <summary>
        /// 媒体存取设备的容量
        /// </summary>
        public UInt16[] Capabilities
        {
            get { return capabilities; }
            set { capabilities = value; }
        }
        /// <summary>
        /// Capabilities内容的逐条解释
        /// </summary>
        public string[] CapabilityDescriptions
        {
            get { return capabilityDescriptions; }
            set { capabilityDescriptions = value; }
        }
        /// <summary>
        /// 逻辑文件的压缩方法
        /// </summary>
        public string CompressionMethod
        {
            get { return compressionMethod; }
            set { compressionMethod = value; }
        }
        /// <summary>
        /// 设备默认块的尺寸,用字节,为设备
        /// </summary>
        public UInt64 DefaultBlockSize
        {
            get { return defaultBlockSize; }
            set { defaultBlockSize = value; }
        }
        /// <summary>
        /// 自由描述类型错误,对设备发现和修正支持
        /// </summary>
        public string ErrorMethodology
        {
            get { return errorMethodology; }
            set { errorMethodology = value; }
        }
        /// <summary>
        /// 设备最大块的尺寸,用字节,为设备
        /// </summary>
        public UInt64 MaxBlockSize
        {
            get { return maxBlockSize; }
            set { maxBlockSize = value; }
        }
        /// <summary>
        /// 最大尺寸,千字节,对设备支持媒体的容量,千字节是1000不是1024
        /// </summary>
        public UInt64 MaxMediaSize
        {
            get { return maxMediaSize; }
            set { maxMediaSize = value; }
        }
        /// <summary>
        /// 设备最小块的尺寸,用字节,为设备
        /// </summary>
        public UInt64 MinBlockSize
        {
            get { return minBlockSize; }
            set { minBlockSize = value; }
        }
        /// <summary>
        /// 如真,这媒体联接设备需要清空,否则手动或自动清空Capabilities array 是可能的
        /// </summary>
        public bool NeedsCleaning
        {
            get { return needsCleaning; }
            set { needsCleaning = value; }
        }
        /// <summary>
        /// 能支持或插入多重的个别媒体的最大量
        /// </summary>
        public bool NumberOfMediaSupported
        {
            get { return numberOfMediaSupported; }
            set { numberOfMediaSupported = value; }
        }
        /// <summary>
        /// Capabilities的解释
        /// </summary>
        public Dictionary<UInt32, string> YxDictionCapabilities
        {
            get { 
                GetParser();
                return dictionCapabilities; 
            }
        }

        /// <summary>
        /// 得到Capabilities的意思通过key
        /// </summary>
        /// <param name="key">key</param>
        /// <returns>解释</returns>
        public string GetCapabilitiesbyInt(uint key)
        {
            string dic;
            bool a = this.YxDictionCapabilities.TryGetValue(key, out dic);
            if (a)
            {
                return dic;
            }
            else
            {
                throw new Exception("没有找到这个键的值");
            }
        }

        private void GetParser()
        {
            MemoryStream stream1 = new MemoryStream(this.arr);
            BinaryFormatter formatter1 = new BinaryFormatter();
            //			formatter1.set_AssemblyFormat(0);
            formatter1.AssemblyFormat = FormatterAssemblyStyle.Simple;
            this.dictionCapabilities = (Dictionary<uint, string>)formatter1.Deserialize(stream1);
        }       

    }
}
