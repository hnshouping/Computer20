using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters;

namespace Computer
{
    public abstract class CIMStorageExtent : CIMLogicalDevice
    {
        private UInt16 access;
        private UInt64 blockSize;
        private string errorMethodology;
        private UInt64 numberOfBlocks;
        private string purpose;

        private Dictionary<UInt16, string> dictionAccess;


        private byte[] arr={
                0,1,0,0,0,255,255,255,255,1,
                0,0,0,0,0,0,0,4,1,0,0,
                0,226,1,83,121,115,116,101,109,46,67,
                111,108,108,101,99,116,105,111,110,115,46,
                71,101,110,101,114,105,99,46,68,105,99,
                116,105,111,110,97,114,121,96,50,91,91,
                83,121,115,116,101,109,46,85,73,110,116,
                49,54,44,32,109,115,99,111,114,108,105,
                98,44,32,86,101,114,115,105,111,110,61,
                50,46,48,46,48,46,48,44,32,67,117,
                108,116,117,114,101,61,110,101,117,116,114,
                97,108,44,32,80,117,98,108,105,99,75,
                101,121,84,111,107,101,110,61,98,55,55,
                97,53,99,53,54,49,57,51,52,101,48,
                56,57,93,44,91,83,121,115,116,101,109,
                46,83,116,114,105,110,103,44,32,109,115,
                99,111,114,108,105,98,44,32,86,101,114,
                115,105,111,110,61,50,46,48,46,48,46,
                48,44,32,67,117,108,116,117,114,101,61,
                110,101,117,116,114,97,108,44,32,80,117,
                98,108,105,99,75,101,121,84,111,107,101,
                110,61,98,55,55,97,53,99,53,54,49,
                57,51,52,101,48,56,57,93,93,4,0,
                0,0,7,86,101,114,115,105,111,110,8,
                67,111,109,112,97,114,101,114,8,72,97,
                115,104,83,105,122,101,13,75,101,121,86,
                97,108,117,101,80,97,105,114,115,0,3,
                0,3,8,146,1,83,121,115,116,101,109,
                46,67,111,108,108,101,99,116,105,111,110,
                115,46,71,101,110,101,114,105,99,46,71,
                101,110,101,114,105,99,69,113,117,97,108,
                105,116,121,67,111,109,112,97,114,101,114,
                96,49,91,91,83,121,115,116,101,109,46,
                85,73,110,116,49,54,44,32,109,115,99,
                111,114,108,105,98,44,32,86,101,114,115,
                105,111,110,61,50,46,48,46,48,46,48,
                44,32,67,117,108,116,117,114,101,61,110,
                101,117,116,114,97,108,44,32,80,117,98,
                108,105,99,75,101,121,84,111,107,101,110,
                61,98,55,55,97,53,99,53,54,49,57,
                51,52,101,48,56,57,93,93,8,230,1,
                83,121,115,116,101,109,46,67,111,108,108,
                101,99,116,105,111,110,115,46,71,101,110,
                101,114,105,99,46,75,101,121,86,97,108,
                117,101,80,97,105,114,96,50,91,91,83,
                121,115,116,101,109,46,85,73,110,116,49,
                54,44,32,109,115,99,111,114,108,105,98,
                44,32,86,101,114,115,105,111,110,61,50,
                46,48,46,48,46,48,44,32,67,117,108,
                116,117,114,101,61,110,101,117,116,114,97,
                108,44,32,80,117,98,108,105,99,75,101,
                121,84,111,107,101,110,61,98,55,55,97,
                53,99,53,54,49,57,51,52,101,48,56,
                57,93,44,91,83,121,115,116,101,109,46,
                83,116,114,105,110,103,44,32,109,115,99,
                111,114,108,105,98,44,32,86,101,114,115,
                105,111,110,61,50,46,48,46,48,46,48,
                44,32,67,117,108,116,117,114,101,61,110,
                101,117,116,114,97,108,44,32,80,117,98,
                108,105,99,75,101,121,84,111,107,101,110,
                61,98,55,55,97,53,99,53,54,49,57,
                51,52,101,48,56,57,93,93,91,93,5,
                0,0,0,9,2,0,0,0,7,0,0,
                0,9,3,0,0,0,4,2,0,0,0,
                146,1,83,121,115,116,101,109,46,67,111,
                108,108,101,99,116,105,111,110,115,46,71,
                101,110,101,114,105,99,46,71,101,110,101,
                114,105,99,69,113,117,97,108,105,116,121,
                67,111,109,112,97,114,101,114,96,49,91,
                91,83,121,115,116,101,109,46,85,73,110,
                116,49,54,44,32,109,115,99,111,114,108,
                105,98,44,32,86,101,114,115,105,111,110,
                61,50,46,48,46,48,46,48,44,32,67,
                117,108,116,117,114,101,61,110,101,117,116,
                114,97,108,44,32,80,117,98,108,105,99,
                75,101,121,84,111,107,101,110,61,98,55,
                55,97,53,99,53,54,49,57,51,52,101,
                48,56,57,93,93,0,0,0,0,7,3,
                0,0,0,0,1,0,0,0,5,0,0,
                0,3,228,1,83,121,115,116,101,109,46,
                67,111,108,108,101,99,116,105,111,110,115,
                46,71,101,110,101,114,105,99,46,75,101,
                121,86,97,108,117,101,80,97,105,114,96,
                50,91,91,83,121,115,116,101,109,46,85,
                73,110,116,49,54,44,32,109,115,99,111,
                114,108,105,98,44,32,86,101,114,115,105,
                111,110,61,50,46,48,46,48,46,48,44,
                32,67,117,108,116,117,114,101,61,110,101,
                117,116,114,97,108,44,32,80,117,98,108,
                105,99,75,101,121,84,111,107,101,110,61,
                98,55,55,97,53,99,53,54,49,57,51,
                52,101,48,56,57,93,44,91,83,121,115,
                116,101,109,46,83,116,114,105,110,103,44,
                32,109,115,99,111,114,108,105,98,44,32,
                86,101,114,115,105,111,110,61,50,46,48,
                46,48,46,48,44,32,67,117,108,116,117,
                114,101,61,110,101,117,116,114,97,108,44,
                32,80,117,98,108,105,99,75,101,121,84,
                111,107,101,110,61,98,55,55,97,53,99,
                53,54,49,57,51,52,101,48,56,57,93,
                93,4,252,255,255,255,228,1,83,121,115,
                116,101,109,46,67,111,108,108,101,99,116,
                105,111,110,115,46,71,101,110,101,114,105,
                99,46,75,101,121,86,97,108,117,101,80,
                97,105,114,96,50,91,91,83,121,115,116,
                101,109,46,85,73,110,116,49,54,44,32,
                109,115,99,111,114,108,105,98,44,32,86,
                101,114,115,105,111,110,61,50,46,48,46,
                48,46,48,44,32,67,117,108,116,117,114,
                101,61,110,101,117,116,114,97,108,44,32,
                80,117,98,108,105,99,75,101,121,84,111,
                107,101,110,61,98,55,55,97,53,99,53,
                54,49,57,51,52,101,48,56,57,93,44,
                91,83,121,115,116,101,109,46,83,116,114,
                105,110,103,44,32,109,115,99,111,114,108,
                105,98,44,32,86,101,114,115,105,111,110,
                61,50,46,48,46,48,46,48,44,32,67,
                117,108,116,117,114,101,61,110,101,117,116,
                114,97,108,44,32,80,117,98,108,105,99,
                75,101,121,84,111,107,101,110,61,98,55,
                55,97,53,99,53,54,49,57,51,52,101,
                48,56,57,93,93,2,0,0,0,3,107,
                101,121,5,118,97,108,117,101,0,1,14,
                1,0,6,5,0,0,0,7,85,110,107,
                110,111,119,110,1,250,255,255,255,252,255,
                255,255,2,0,6,7,0,0,0,8,82,
                101,97,100,97,98,108,101,1,248,255,255,
                255,252,255,255,255,3,0,6,9,0,0,
                0,9,87,114,105,116,101,97,98,108,101,
                1,246,255,255,255,252,255,255,255,4,0,
                6,11,0,0,0,20,82,101,97,100,47,
                119,114,105,116,101,32,115,117,112,112,111,
                114,116,101,100,1,244,255,255,255,252,255,
                255,255,5,0,6,13,0,0,0,10,87,
                114,105,116,101,32,111,110,99,101,11,0
        };



        /// <summary>
        /// 描述媒体的读/写属性
        /// </summary>
        public UInt16 Access
        {
            get { return access; }
            set { access = value; }
        }
        /// <summary>
        /// 块的尺寸,用字节,从荐储继承
        /// </summary>
        public UInt64 BlockSize
        {
            get { return blockSize; }
            set { blockSize = value; }
        }
        /// <summary>
        /// 自由描述对错误类型的发觉和修正,从荐储继承
        /// </summary>
        public string ErrorMethodology
        {
            get { return errorMethodology; }
            set { errorMethodology = value; }
        }
        /// <summary>
        /// 块的连续号,包含每个块尺寸属性的块的值,从荐储继承
        /// </summary>
        public UInt64 NumberOfBlocks
        {
            get { return numberOfBlocks; }
            set { numberOfBlocks = value; }
        }
        /// <summary>
        ///自由描述媒体和对它的利用
        /// </summary>
        public string Purpose
        {
            get { return purpose; }
            set { purpose = value; }
        }
        public Dictionary<UInt16, string> YxDictionAccess
        {
            get {
                GetParser(); 
                return dictionAccess;
            }
        }
        /// <summary>
        /// 得到Access的意思通过key
        /// </summary>
        /// <param name="key">key</param>
        /// <returns>解释</returns>
        public string GetAccessbyInt(ushort key)
        {
            string dic;
            bool a = this.YxDictionAccess.TryGetValue(key, out dic);
            if (a)
            {
                return dic;
            }
            else
            {
                throw new Exception("没有找到这个键的值");
            }
        }

        private void GetParser()
        {
            MemoryStream stream1 = new MemoryStream(this.arr);
            BinaryFormatter formatter1 = new BinaryFormatter();
            //			formatter1.set_AssemblyFormat(0);
            formatter1.AssemblyFormat = FormatterAssemblyStyle.Simple;
            this.dictionAccess = (Dictionary<ushort, string>)formatter1.Deserialize(stream1);
        }
    }
}
